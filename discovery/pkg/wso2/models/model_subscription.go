/*
 * WSO2 API Manager - Publisher API
 *
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication Our REST APIs are protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<gateway_port>/token ``` **Sample request** ``` curl https://localhost:8243/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * API version: v1.1
 * Contact: architecture@wso2.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Subscription struct for Subscription
type Subscription struct {
	SubscriptionId string `json:"subscriptionId"`
	ApplicationInfo ApplicationInfo `json:"applicationInfo"`
	ThrottlingPolicy string `json:"throttlingPolicy"`
	SubscriptionStatus string `json:"subscriptionStatus"`
}

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription(subscriptionId string, applicationInfo ApplicationInfo, throttlingPolicy string, subscriptionStatus string, ) *Subscription {
	this := Subscription{}
	this.SubscriptionId = subscriptionId
	this.ApplicationInfo = applicationInfo
	this.ThrottlingPolicy = throttlingPolicy
	this.SubscriptionStatus = subscriptionStatus
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetSubscriptionId returns the SubscriptionId field value
func (o *Subscription) GetSubscriptionId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SubscriptionId
}

// GetSubscriptionIdOk returns a tuple with the SubscriptionId field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetSubscriptionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubscriptionId, true
}

// SetSubscriptionId sets field value
func (o *Subscription) SetSubscriptionId(v string) {
	o.SubscriptionId = v
}

// GetApplicationInfo returns the ApplicationInfo field value
func (o *Subscription) GetApplicationInfo() ApplicationInfo {
	if o == nil  {
		var ret ApplicationInfo
		return ret
	}

	return o.ApplicationInfo
}

// GetApplicationInfoOk returns a tuple with the ApplicationInfo field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetApplicationInfoOk() (*ApplicationInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApplicationInfo, true
}

// SetApplicationInfo sets field value
func (o *Subscription) SetApplicationInfo(v ApplicationInfo) {
	o.ApplicationInfo = v
}

// GetThrottlingPolicy returns the ThrottlingPolicy field value
func (o *Subscription) GetThrottlingPolicy() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ThrottlingPolicy
}

// GetThrottlingPolicyOk returns a tuple with the ThrottlingPolicy field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetThrottlingPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ThrottlingPolicy, true
}

// SetThrottlingPolicy sets field value
func (o *Subscription) SetThrottlingPolicy(v string) {
	o.ThrottlingPolicy = v
}

// GetSubscriptionStatus returns the SubscriptionStatus field value
func (o *Subscription) GetSubscriptionStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SubscriptionStatus
}

// GetSubscriptionStatusOk returns a tuple with the SubscriptionStatus field value
// and a boolean to check if the value has been set.
func (o *Subscription) GetSubscriptionStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SubscriptionStatus, true
}

// SetSubscriptionStatus sets field value
func (o *Subscription) SetSubscriptionStatus(v string) {
	o.SubscriptionStatus = v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subscriptionId"] = o.SubscriptionId
	}
	if true {
		toSerialize["applicationInfo"] = o.ApplicationInfo
	}
	if true {
		toSerialize["throttlingPolicy"] = o.ThrottlingPolicy
	}
	if true {
		toSerialize["subscriptionStatus"] = o.SubscriptionStatus
	}
	return json.Marshal(toSerialize)
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


