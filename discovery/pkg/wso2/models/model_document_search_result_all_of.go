/*
 * WSO2 API Manager - Publisher API
 *
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication Our REST APIs are protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<gateway_port>/token ``` **Sample request** ``` curl https://localhost:8243/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * API version: v1.1
 * Contact: architecture@wso2.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// DocumentSearchResultAllOf struct for DocumentSearchResultAllOf
type DocumentSearchResultAllOf struct {
	DocType *string `json:"docType,omitempty"`
	Summary *string `json:"summary,omitempty"`
	SourceType *string `json:"sourceType,omitempty"`
	SourceUrl *string `json:"sourceUrl,omitempty"`
	OtherTypeName *string `json:"otherTypeName,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	// The name of the associated API
	ApiName *string `json:"apiName,omitempty"`
	// The version of the associated API
	ApiVersion *string `json:"apiVersion,omitempty"`
	ApiProvider *string `json:"apiProvider,omitempty"`
	ApiUUID *string `json:"apiUUID,omitempty"`
	AssociatedType *string `json:"associatedType,omitempty"`
}

// NewDocumentSearchResultAllOf instantiates a new DocumentSearchResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentSearchResultAllOf() *DocumentSearchResultAllOf {
	this := DocumentSearchResultAllOf{}
	return &this
}

// NewDocumentSearchResultAllOfWithDefaults instantiates a new DocumentSearchResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentSearchResultAllOfWithDefaults() *DocumentSearchResultAllOf {
	this := DocumentSearchResultAllOf{}
	return &this
}

// GetDocType returns the DocType field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetDocType() string {
	if o == nil || o.DocType == nil {
		var ret string
		return ret
	}
	return *o.DocType
}

// GetDocTypeOk returns a tuple with the DocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetDocTypeOk() (*string, bool) {
	if o == nil || o.DocType == nil {
		return nil, false
	}
	return o.DocType, true
}

// HasDocType returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasDocType() bool {
	if o != nil && o.DocType != nil {
		return true
	}

	return false
}

// SetDocType gets a reference to the given string and assigns it to the DocType field.
func (o *DocumentSearchResultAllOf) SetDocType(v string) {
	o.DocType = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *DocumentSearchResultAllOf) SetSummary(v string) {
	o.Summary = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetSourceType() string {
	if o == nil || o.SourceType == nil {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetSourceTypeOk() (*string, bool) {
	if o == nil || o.SourceType == nil {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasSourceType() bool {
	if o != nil && o.SourceType != nil {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *DocumentSearchResultAllOf) SetSourceType(v string) {
	o.SourceType = &v
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetSourceUrl() string {
	if o == nil || o.SourceUrl == nil {
		var ret string
		return ret
	}
	return *o.SourceUrl
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetSourceUrlOk() (*string, bool) {
	if o == nil || o.SourceUrl == nil {
		return nil, false
	}
	return o.SourceUrl, true
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasSourceUrl() bool {
	if o != nil && o.SourceUrl != nil {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given string and assigns it to the SourceUrl field.
func (o *DocumentSearchResultAllOf) SetSourceUrl(v string) {
	o.SourceUrl = &v
}

// GetOtherTypeName returns the OtherTypeName field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetOtherTypeName() string {
	if o == nil || o.OtherTypeName == nil {
		var ret string
		return ret
	}
	return *o.OtherTypeName
}

// GetOtherTypeNameOk returns a tuple with the OtherTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetOtherTypeNameOk() (*string, bool) {
	if o == nil || o.OtherTypeName == nil {
		return nil, false
	}
	return o.OtherTypeName, true
}

// HasOtherTypeName returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasOtherTypeName() bool {
	if o != nil && o.OtherTypeName != nil {
		return true
	}

	return false
}

// SetOtherTypeName gets a reference to the given string and assigns it to the OtherTypeName field.
func (o *DocumentSearchResultAllOf) SetOtherTypeName(v string) {
	o.OtherTypeName = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetVisibility() string {
	if o == nil || o.Visibility == nil {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetVisibilityOk() (*string, bool) {
	if o == nil || o.Visibility == nil {
		return nil, false
	}
	return o.Visibility, true
}

// HasVisibility returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasVisibility() bool {
	if o != nil && o.Visibility != nil {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *DocumentSearchResultAllOf) SetVisibility(v string) {
	o.Visibility = &v
}

// GetApiName returns the ApiName field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetApiName() string {
	if o == nil || o.ApiName == nil {
		var ret string
		return ret
	}
	return *o.ApiName
}

// GetApiNameOk returns a tuple with the ApiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetApiNameOk() (*string, bool) {
	if o == nil || o.ApiName == nil {
		return nil, false
	}
	return o.ApiName, true
}

// HasApiName returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasApiName() bool {
	if o != nil && o.ApiName != nil {
		return true
	}

	return false
}

// SetApiName gets a reference to the given string and assigns it to the ApiName field.
func (o *DocumentSearchResultAllOf) SetApiName(v string) {
	o.ApiName = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *DocumentSearchResultAllOf) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetApiProvider returns the ApiProvider field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetApiProvider() string {
	if o == nil || o.ApiProvider == nil {
		var ret string
		return ret
	}
	return *o.ApiProvider
}

// GetApiProviderOk returns a tuple with the ApiProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetApiProviderOk() (*string, bool) {
	if o == nil || o.ApiProvider == nil {
		return nil, false
	}
	return o.ApiProvider, true
}

// HasApiProvider returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasApiProvider() bool {
	if o != nil && o.ApiProvider != nil {
		return true
	}

	return false
}

// SetApiProvider gets a reference to the given string and assigns it to the ApiProvider field.
func (o *DocumentSearchResultAllOf) SetApiProvider(v string) {
	o.ApiProvider = &v
}

// GetApiUUID returns the ApiUUID field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetApiUUID() string {
	if o == nil || o.ApiUUID == nil {
		var ret string
		return ret
	}
	return *o.ApiUUID
}

// GetApiUUIDOk returns a tuple with the ApiUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetApiUUIDOk() (*string, bool) {
	if o == nil || o.ApiUUID == nil {
		return nil, false
	}
	return o.ApiUUID, true
}

// HasApiUUID returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasApiUUID() bool {
	if o != nil && o.ApiUUID != nil {
		return true
	}

	return false
}

// SetApiUUID gets a reference to the given string and assigns it to the ApiUUID field.
func (o *DocumentSearchResultAllOf) SetApiUUID(v string) {
	o.ApiUUID = &v
}

// GetAssociatedType returns the AssociatedType field value if set, zero value otherwise.
func (o *DocumentSearchResultAllOf) GetAssociatedType() string {
	if o == nil || o.AssociatedType == nil {
		var ret string
		return ret
	}
	return *o.AssociatedType
}

// GetAssociatedTypeOk returns a tuple with the AssociatedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentSearchResultAllOf) GetAssociatedTypeOk() (*string, bool) {
	if o == nil || o.AssociatedType == nil {
		return nil, false
	}
	return o.AssociatedType, true
}

// HasAssociatedType returns a boolean if a field has been set.
func (o *DocumentSearchResultAllOf) HasAssociatedType() bool {
	if o != nil && o.AssociatedType != nil {
		return true
	}

	return false
}

// SetAssociatedType gets a reference to the given string and assigns it to the AssociatedType field.
func (o *DocumentSearchResultAllOf) SetAssociatedType(v string) {
	o.AssociatedType = &v
}

func (o DocumentSearchResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocType != nil {
		toSerialize["docType"] = o.DocType
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.SourceType != nil {
		toSerialize["sourceType"] = o.SourceType
	}
	if o.SourceUrl != nil {
		toSerialize["sourceUrl"] = o.SourceUrl
	}
	if o.OtherTypeName != nil {
		toSerialize["otherTypeName"] = o.OtherTypeName
	}
	if o.Visibility != nil {
		toSerialize["visibility"] = o.Visibility
	}
	if o.ApiName != nil {
		toSerialize["apiName"] = o.ApiName
	}
	if o.ApiVersion != nil {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if o.ApiProvider != nil {
		toSerialize["apiProvider"] = o.ApiProvider
	}
	if o.ApiUUID != nil {
		toSerialize["apiUUID"] = o.ApiUUID
	}
	if o.AssociatedType != nil {
		toSerialize["associatedType"] = o.AssociatedType
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentSearchResultAllOf struct {
	value *DocumentSearchResultAllOf
	isSet bool
}

func (v NullableDocumentSearchResultAllOf) Get() *DocumentSearchResultAllOf {
	return v.value
}

func (v *NullableDocumentSearchResultAllOf) Set(val *DocumentSearchResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentSearchResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentSearchResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentSearchResultAllOf(val *DocumentSearchResultAllOf) *NullableDocumentSearchResultAllOf {
	return &NullableDocumentSearchResultAllOf{value: val, isSet: true}
}

func (v NullableDocumentSearchResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentSearchResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


